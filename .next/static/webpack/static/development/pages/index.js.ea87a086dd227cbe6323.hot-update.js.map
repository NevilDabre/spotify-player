{"version":3,"file":"static/webpack/static\\development\\pages\\index.js.ea87a086dd227cbe6323.hot-update.js","sources":["webpack:///./pages/index.js"],"sourcesContent":["import React, { Component, useEffect, useState } from 'react';\r\nimport SpotifyWebApi from 'spotify-web-api-js'\r\nconst spotifyApi = new SpotifyWebApi();\r\n\r\nexport const authEndpoint = 'https://accounts.spotify.com/authorize';\r\n\r\nconst clientId = 'bc49f02eb2ed4712ae02fd6c17d41f5c';\r\nconst redirectUri = 'http://localhost:3000';\r\nconst scopes = [\r\n    'user-read-currently-playing',\r\n    'user-read-playback-state'\r\n]\r\n\r\nlet listItems;\r\n\r\nfunction Images(props){\r\n    console.log(props.imgList)\r\n    const ImagesList = props.imgList.map(i=> <img src={i.url} height=\"80\" width=\"80\" />)\r\n    return(\r\n        <>\r\n        <li>\r\n        <ImagesList />\r\n        </li>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nfunction CompanyIconInHeader() {\r\n  return <span>y</span>;\r\n}\r\n\r\nconst Index = () => {\r\n    const [token, setToken] = useState(null)\r\n    const [newReleases, setNewReleases] = useState(null)\r\n\r\n    useEffect(() => {\r\n        // Get the hash of the url\r\n        const hash = window.location.hash\r\n            .substring(1)\r\n            .split(\"&\")\r\n            .reduce(function (initial, item) {\r\n                if (item) {\r\n                    var parts = item.split(\"=\");\r\n                    initial[parts[0]] = decodeURIComponent(parts[1]);\r\n                }\r\n                return initial;\r\n            }, {});\r\n        window.location.hash = \"\";\r\n\r\n        let _token = hash.access_token;\r\n        if (_token) {\r\n            //Set token\r\n            setToken(_token)\r\n        }\r\n    })\r\n\r\n    const getNowPlaying = () => {\r\n        spotifyApi.setAccessToken(token);\r\n        spotifyApi.getNewReleases(function (err, data) {\r\n            if (err) console.error(err);\r\n            const items = data.albums.items;\r\n            setNewReleases(items);\r\n            if (newReleases && newReleases.length > 0) {\r\n                listItems = newReleases.map((nr, index) =>\r\n                    <li key={index}>\r\n                        <Images imgList={nr.images} />\r\n                    </li>\r\n                );\r\n            }\r\n        });\r\n    }\r\n\r\n    return (\r\n        <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'center', flexDirection: 'column' }}>\r\n            <h1>Hello Spotify!</h1>\r\n            <div>\r\n                {!token &&\r\n                    (<a\r\n                        href={`${authEndpoint}?client_id=${clientId}&redirect_uri=${redirectUri}&scope=${scopes.join(\"%20\")}&response_type=token&show_dialog=true`}\r\n                    >\r\n                        Login to Spotify\r\n                      </a>)}\r\n                {token &&\r\n                    <>\r\n                        {newReleases ? (\r\n                            newReleases.map(newRelease => {\r\n                                return (<>\r\n\r\n                                    <label>{newRelease.name}</label>\r\n                                    <label>Date - {newRelease.release_date}</label>\r\n                                    {\r\n                                        newRelease.images.map(img => {\r\n                                            <>\r\n                                                <img height=\"120\" width=\"120\" src={img.url} /><br />\r\n                                            </>\r\n                                        })\r\n                                    }\r\n                                </>)\r\n                            })\r\n                        )\r\n                            : null\r\n                        }\r\n                        {listItems}\r\n                        <button onClick={() => getNowPlaying()}>Check Now Playing</button>\r\n                    </>\r\n                }\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Index;"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AAKA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAGA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AACA;;;;A","sourceRoot":""}